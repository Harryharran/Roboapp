{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus\\\\OneDrive\\\\Documents\\\\RoboApp\\\\src\\\\Component\\\\cardlist.js\";\nimport React from \"react\";\nimport Card from \"./card\";\n// import { robots } from \"./robots\";\n\n// We can't return array, can return only Func comp with single parent Element. So Cardarray is enclaved within cardlist. \n// const Cardlist =({robo})=>{\n//     const Cardarray = robo.map((user,i)=> {\n//   return <Card id={robo[i].id} name={robo[i].name} email={robo[i].email} /> ;\n//     })\n//     return (\n//         <>\n//         {Cardarray} \n//         </>\n//         // Has to destructure coz its a function.\n//     );\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Cardlist = ({}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tc\",\n    children: robo.map((user, i) => {\n      return /*#__PURE__*/_jsxDEV(Card, {\n        id: robo[i].id,\n        name: robo[i].name,\n        email: robo[i].email\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 7\n  }, this)\n  // Tag elements unifies under single parent or fragment,else these func enclose it in destructure. \n  // User is used indirectly.\n  ;\n};\n_c = Cardlist;\nexport default Cardlist;\nvar _c;\n$RefreshReg$(_c, \"Cardlist\");","map":{"version":3,"names":["React","Card","jsxDEV","_jsxDEV","Cardlist","className","children","robo","map","user","i","id","name","email","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Asus/OneDrive/Documents/RoboApp/src/Component/cardlist.js"],"sourcesContent":["import React from \"react\";\r\nimport Card from \"./card\";\r\n// import { robots } from \"./robots\";\r\n\r\n// We can't return array, can return only Func comp with single parent Element. So Cardarray is enclaved within cardlist. \r\n// const Cardlist =({robo})=>{\r\n//     const Cardarray = robo.map((user,i)=> {\r\n//   return <Card id={robo[i].id} name={robo[i].name} email={robo[i].email} /> ;\r\n//     })\r\n//     return (\r\n//         <>\r\n//         {Cardarray} \r\n//         </>\r\n//         // Has to destructure coz its a function.\r\n//     );\r\n// }\r\n\r\n\r\nconst Cardlist =({})=>{\r\n  return (\r\n      <div className=\"tc\">\r\n      {\r\n     robo.map((user,i) => {\r\n      return (\r\n      <Card\r\n       key={i}\r\n       id={robo[i].id} \r\n       name={robo[i].name}\r\n       email={robo[i].email} \r\n       />)\r\n      })\r\n      }\r\n      </div>  \r\n      // Tag elements unifies under single parent or fragment,else these func enclose it in destructure. \r\n      // User is used indirectly.\r\n  );\r\n}\r\n\r\nexport default Cardlist;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,QAAQ;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGA,MAAMC,QAAQ,GAAEA,CAAC,CAAC,CAAC,KAAG;EACpB,oBACID,OAAA;IAAKE,SAAS,EAAC,IAAI;IAAAC,QAAA,EAEpBC,IAAI,CAACC,GAAG,CAAC,CAACC,IAAI,EAACC,CAAC,KAAK;MACpB,oBACAP,OAAA,CAACF,IAAI;QAEJU,EAAE,EAAEJ,IAAI,CAACG,CAAC,CAAC,CAACC,EAAG;QACfC,IAAI,EAAEL,IAAI,CAACG,CAAC,CAAC,CAACE,IAAK;QACnBC,KAAK,EAAEN,IAAI,CAACG,CAAC,CAAC,CAACG;MAAM,GAHhBH,CAAC;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIL,CAAC;IACH,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEG;EACL;EACA;EAAA;AAEN,CAAC;AAAAC,EAAA,GAlBKd,QAAQ;AAoBd,eAAeA,QAAQ;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}