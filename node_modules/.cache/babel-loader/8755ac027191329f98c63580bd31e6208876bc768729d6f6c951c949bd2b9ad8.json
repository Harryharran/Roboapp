{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus\\\\OneDrive\\\\my-new-app\\\\src\\\\cardlist.js\";\nimport React from \"react\";\nimport Card from \"./card\";\nimport { robots } from \"./robots\";\n\n// We can't return array, can return only Func comp with single parent Element. So Cardarray is enclaved within cardlist. \n// const Cardlist =({robo})=>{\n//     const Cardarray = robo.map((user,i)=> {\n//   return <Card id={robo[i].id} name={robo[i].name} email={robo[i].email} /> ;\n//     })\n//     return (\n//         <>\n//         {Cardarray} \n//         </>\n//         // Has to destructure coz its a function.\n//     );\n// }\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Cardlist = ({\n  robo\n}) => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: robo.map((user, i) => {\n      return;\n      /*#__PURE__*/_jsxDEV(Card, {\n        id: robo[i].id,\n        name: robo[i].name,\n        email: robo[i].email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      }, this);\n    })\n  }, void 0, false)\n  // If not there are tag elements, enclose it in destructure.\n  ;\n};\n_c = Cardlist;\nexport default Cardlist;\nvar _c;\n$RefreshReg$(_c, \"Cardlist\");","map":{"version":3,"names":["React","Card","robots","jsxDEV","_jsxDEV","Fragment","_Fragment","Cardlist","robo","children","map","user","i","id","name","email","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Asus/OneDrive/my-new-app/src/cardlist.js"],"sourcesContent":["import React from \"react\";\r\nimport Card from \"./card\";\r\nimport { robots } from \"./robots\";\r\n\r\n// We can't return array, can return only Func comp with single parent Element. So Cardarray is enclaved within cardlist. \r\n// const Cardlist =({robo})=>{\r\n//     const Cardarray = robo.map((user,i)=> {\r\n//   return <Card id={robo[i].id} name={robo[i].name} email={robo[i].email} /> ;\r\n//     })\r\n//     return (\r\n//         <>\r\n//         {Cardarray} \r\n//         </>\r\n//         // Has to destructure coz its a function.\r\n//     );\r\n// }\r\n\r\n\r\nconst Cardlist =({robo})=>{\r\n  return (\r\n      <>\r\n      {\r\n     robo.map((user,i) => {\r\n      return \r\n      <Card\r\n       id={robo[i].id} \r\n       name={robo[i].name}\r\n       email={robo[i].email} \r\n       />\r\n      })\r\n      }\r\n      </>  \r\n      // If not there are tag elements, enclose it in destructure.\r\n  );\r\n}\r\n\r\nexport default Cardlist;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,QAAQ;AACzB,SAASC,MAAM,QAAQ,UAAU;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAGA,MAAMC,QAAQ,GAAEA,CAAC;EAACC;AAAI,CAAC,KAAG;EACxB,oBACIJ,OAAA,CAAAE,SAAA;IAAAG,QAAA,EAEDD,IAAI,CAACE,GAAG,CAAC,CAACC,IAAI,EAACC,CAAC,KAAK;MACpB;MACA,aAAAR,OAAA,CAACH,IAAI;QACJY,EAAE,EAAEL,IAAI,CAACI,CAAC,CAAC,CAACC,EAAG;QACfC,IAAI,EAAEN,IAAI,CAACI,CAAC,CAAC,CAACE,IAAK;QACnBC,KAAK,EAAEP,IAAI,CAACI,CAAC,CAAC,CAACG;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpB,CAAC;IACH,CAAC;EAAC,gBAEA;EACF;EAAA;AAEN,CAAC;AAAAC,EAAA,GAhBKb,QAAQ;AAkBd,eAAeA,QAAQ;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}